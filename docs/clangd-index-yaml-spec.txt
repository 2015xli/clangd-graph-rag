Exposed data#
Symbol(s) are the primary objects managed by the index. A function, variable, class, or macro is a Symbol, and each one has an opaque SymbolID. Two declarations of the same thing will produce the same SymbolID and thus be merged into one Symbol.

Symbols have names, declaration/definition locations, documentation, and a bunch of attributes used for code completion.

They can be looked up by ID, or fuzzy-searched by name.

Refs are uses of a symbol in code, such as a call to a function. They are edges between a Symbol and a location in some file.

They can be looked up by SymbolID.

Relation(s) describe related symbols, such as a class that inherits another. They are edges between two Symbols, labeled with a relation kind.

They are looked up using one of the Symbols and the kind.


Each reference has a kind with number like 10, 9, 12, where 10 stands for definition, 12 for an actual use (function call site), and 9 for declaration.

// clang-tools-extra/clangd/index/Ref.h
enum class RefKind : uint8_t {
  Unknown = 0,
  Declaration = 1 << 0, // 1
  Definition = 1 << 1,  // 2
  Reference = 1 << 2,   // 4
  Spelled = 1 << 3,     // 8 : A reference which is a call. Used as a filter for which references
                        // to store in data structures used for computing outgoing calls.
  Call = 1 << 4,
  All = Declaration | Definition | Reference | Spelled,
};

The combined RefKind values for function:
9:  Declaration (RefKind::Declaration | RefKind::Spelled)
10: Definition  (RefKind::Definition | RefKind::Spelled)
12: Reference (real call site)  (RefKind::Reference | RefKind::Spelled)

Linux kernel has RefKinds:
  - Kind:            1
  - Kind:            10
  - Kind:            12
  - Kind:            2
  - Kind:            4
  - Kind:            9
